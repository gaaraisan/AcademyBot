import asyncio
import nest_asyncio  # –î–æ–¥–∞—î–º–æ —Ü–µ–π —ñ–º–ø–æ—Ä—Ç
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import os
import sqlite3
import pandas as pd
import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import showerror

# –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∫–ª–∞–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ü–∏–∫–ª –ø–æ–¥—ñ–π
nest_asyncio.apply()  # –¶–µ–π –≤–∏–∫–ª–∏–∫ –¥–æ–∑–≤–æ–ª—è—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–¥—ñ—ó –æ–¥–Ω–æ—á–∞—Å–Ω–æ

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —ñ–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_PATH = os.getenv("DB_PATH", r"C:/Users/Ostap/Desktop/TeleBotAcademy/database.db")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_activity (
            user_id INTEGER PRIMARY KEY,
            full_name TEXT,
            visited TEXT DEFAULT '0'
    )
    """)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–∫–∏ 'visited' —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    cursor.execute("PRAGMA table_info(user_activity)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'visited' not in columns:
        cursor.execute("ALTER TABLE user_activity ADD COLUMN visited TEXT DEFAULT '0'")

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
def log_activity(user_id: int, full_name: str, visited: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ
    cursor.execute("SELECT visited FROM user_activity WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if row:
        # –Ø–∫—â–æ —î, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å (–∑–∞–º—ñ–Ω—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤)
        cursor.execute("UPDATE user_activity SET visited = ? WHERE user_id = ?", (visited, user_id))
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
        cursor.execute("INSERT INTO user_activity (user_id, full_name, visited) VALUES (?, ?, ?)",
                       (user_id, full_name, visited))

    conn.commit()
    conn.close()


# –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª Excel
def export_to_excel():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_activity")
    rows = cursor.fetchall()
    conn.close()

    df = pd.DataFrame(rows, columns=["‚Ññ", "–ü–æ–≤–Ω–µ —ñ–º'—è", "User ID"])
    df.to_excel("–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.xlsx", index=False)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "–¶–µ–π QR-–∫–æ–¥ ‚Äì —Ü–µ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç –≤—ñ–¥ –Ω–∞—Å —ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ Spinner. "
        "–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É —Ç–∞ –¥—ñ–∑–Ω–∞–≤–∞–π—Å—è, —è–∫ —Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ–≥–æ —Å–≤—ñ—Ç—É!"
    )
    keyboard = [[InlineKeyboardButton("–î–∞–ª—ñ!", callback_data="main_text")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text,
                                             reply_markup=reply_markup)
    context.user_data["last_message_id"] = message.message_id


# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫
async def main_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    last_message_id = context.user_data.get("last_message_id")
    if last_message_id:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)
    text = (
        "–ú–∏ —Ö–æ—á–µ–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Ç–µ–±–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ Spinner –Ω–∞ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: \n\n"
        "‚Ä¢ Game Presenter (–≤–µ–¥—É—á–∏–π/–≤–µ–¥—É—á–∞) \n\n"
        "‚Ä¢ Shuffler (—à–∞—Ñ–ª–µ—Ä) \n\n"
        "–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-—Å—Ç—Ä—ñ–º—ñ–≤."
    )
    keyboard = [[InlineKeyboardButton("–¶—ñ–∫–∞–≤–æ", callback_data="main_tact")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)
    context.user_data["last_message_id"] = message.message_id


async def main_tact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    last_message_id = context.user_data.get("last_message_id")
    if last_message_id:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)
    text = (
        "–£—è–≤–∏ —Å–µ–±–µ —É —Ä–æ–ª—ñ –∑—ñ—Ä–∫–∏ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ ‚Äî —É —Å–≤—ñ—Ç—ñ, –¥–µ –∫–æ–∂–Ω–∞ —Ç–≤–æ—è —Ñ—Ä–∞–∑–∞ –¥–æ–¥–∞—î –µ—Ç–µ—Ä—É —à–∞—Ä–º—É, "
        "–∞ –∫–æ–∂–Ω–∞ –¥—ñ—è —Å—Ç–≤–æ—Ä—é—î –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.  –ú–∏ —à—É–∫–∞—î–º–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–µ–≥—É, "
        "–∞ —Ç–æ–≥–æ, —Ö—Ç–æ –≤–º—ñ—î –±—É—Ç–∏ –Ω–∞ —Ö–≤–∏–ª—ñ, –≤—ñ–¥—á—É–≤–∞—Ç–∏ –º–æ–º–µ–Ω—Ç —ñ –∑–∞—Ä—è–¥–∂–∞—Ç–∏ —Å–≤–æ—î—é –µ–Ω–µ—Ä–≥—ñ—î—é. \n\n"
        "Spinner ‚Äî –Ω–æ–≤–∏–π, –∞–ª–µ –∫—Ä—É—Ç–∏–π –≥—Ä–∞–≤–µ—Ü—å –Ω–∞ —Ä–∏–Ω–∫—É, —ñ —Ç–∏ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –∫–æ–º–∞–Ω–¥–∏, –ø—Ä–æ —è–∫—É —â–µ –¥—ñ–∑–Ω–∞—é—Ç—å—Å—è. "
        "–¢–∏ –≥–æ—Ç–æ–≤–∏–π/-–∞?"
    )
    keyboard = [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–∏–π/(-–∞)", callback_data="final")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)
    context.user_data["last_message_id"] = message.message_id


async def final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    log_activity(user_id, full_name, str(user_id))  # –ó–∞–º—ñ—Å—Ç—å URL –∑–∞–ø–∏—Å—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    last_message_id = context.user_data.get("last_message_id")
    if last_message_id:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)

    final_text = (
        "–¢–≤—ñ–π —ñ–Ω—Ç–µ—Ä–µ—Å –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –Ω–∞—Å! –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –Ω–∞—à–æ–º—É Head of Academy –ê–ª—ñ–Ω—ñ –±—É–¥—å-—è–∫–∏–π –µ–º–æ–¥–∑—ñ üì®, "
        "—â–æ–± –¥–∞—Ç–∏ –Ω–∞–º –∑–Ω–∞—Ç–∏, —â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π/-–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ü—é –ø–æ–¥–æ—Ä–æ–∂ —Ä–∞–∑–æ–º —ñ–∑ Spinner! "
        "–ß–µ–∫–∞—î–º–æ –Ω–∞ —Ç–µ–±–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ, –¥–µ —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è –≤—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —è—Å–∫—Ä–∞–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç—É!"
    )
    keyboard = [[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –ê–ª—ñ–Ω—ñ", url="http://t.me/aavivat")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open(r"front.png", "rb") as photo:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(photo), caption=final_text,
                                     reply_markup=reply_markup)


# –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
def activity_viewer():
    class ActivityViewer:
        def __init__(self, root):
            self.root = root
            self.root.title("Bot Activity Viewer")
            self.root.geometry("600x400")

            # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
            self.root.config(bg='#800080')  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π —Ñ–æ–Ω
            title = tk.Label(root, text="–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", font=("Arial", 16, "bold"), fg="white", bg="#800080")
            title.pack(pady=10)

            # –û–Ω–æ–≤–ª–µ–Ω–æ: –≤–∏—Ä—ñ–≤–Ω—è–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ
            self.tree = ttk.Treeview(root, columns=("‚Ññ", "–ü–æ–≤–Ω–µ —ñ–º'—è", "User ID"), show="headings", height=15)
            self.tree.column("‚Ññ", width=50, anchor="center")
            self.tree.column("–ü–æ–≤–Ω–µ —ñ–º'—è", width=250, anchor="w")
            self.tree.column("User ID", width=300, anchor="w")

            self.tree.heading("‚Ññ", text="‚Ññ")
            self.tree.heading("–ü–æ–≤–Ω–µ —ñ–º'—è", text="–ü–æ–≤–Ω–µ —ñ–º'—è")
            self.tree.heading("User ID", text="User ID")

            self.tree.pack(pady=20)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ Excel
            export_button = tk.Button(root, text="–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ Excel", command=export_to_excel, bg="#4CAF50", fg="white")
            export_button.pack(pady=10)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            refresh_button = tk.Button(root, text="–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", command=self.refresh_data, bg="#800080", fg="white")
            refresh_button.pack(pady=10)

            self.refresh_data()

        def refresh_data(self):
            try:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM user_activity")
                data = cursor.fetchall()

                for item in self.tree.get_children():
                    self.tree.delete(item)

                for index, (user_id, full_name, visited) in enumerate(data, 1):
                    self.tree.insert("", "end", values=(index, full_name, user_id))  # –í–∏–≤–æ–¥–∏–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

                conn.close()
            except sqlite3.Error as e:
                showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

        def update_data(self):
            self.refresh_data()
            self.root.after(5000, self.update_data)

    root = tk.Tk()
    app = ActivityViewer(root)
    root.mainloop()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def start_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(main_text, pattern="^main_text$"))
    application.add_handler(CallbackQueryHandler(main_tact, pattern="^main_tact$"))
    application.add_handler(CallbackQueryHandler(final, pattern="^final$"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    init_db()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –∑–∞–ø—É—Å–∫ –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ—Ç–æ–∫—É –¥–ª—è –±–æ—Ç–∞
    threading.Thread(target=asyncio.run, args=(start_bot(),)).start()

    # –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª—ñ—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    activity_viewer()


if __name__ == "__main__":
    main()

